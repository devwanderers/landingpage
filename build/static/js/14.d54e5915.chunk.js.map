{"version":3,"sources":["views/LandingPage/Benefits.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","components/DisplayText/Header.js","services/stylesServices.js","components/Animations/AnimateTransition.js","../../src/observe.ts","../../src/InView.tsx","../../src/useInView.tsx","components/DisplayText/Paragraph.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/framer-motion/dist/es/animation/animation-controls.js","../node_modules/framer-motion/dist/es/animation/use-animation.js"],"names":["Benefits","collectionConfig","threshold","triggerOnce","useInView","benefit1Ref","benefit1Inview","benefit2Ref","benefit2Inview","benefit3Ref","benefit3Inview","className","base","ref","md","lg","visible","transitionFrom","_slicedToArray","arr","i","arrayWithHoles","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","value","length","err","unsupportedIterableToArray","nonIterableRest","Header","children","style","restProps","returnTextSizeByScreenWidth","sm","xl","xxl","defaultProps","temp","values","index","returnValueByScreenWidth","screenSizeWidth","transitionOptions","left","hidden","opacity","x","show","top","y","right","bottom","leftTop","rightTop","leftBottom","rightBottom","defaultTransitionConfig","type","AnimateTransition","duration","transitionConfig","controls","useAnimation","useEffect","start","div","initial","variants","animate","transition","observerMap","RootIds","rootId","unsupportedValue","optionsToId","options","Object","key","root","observe","element","callback","fallbackInView","window","bounds","isIntersecting","target","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","id","instance","elements","observer","IntersectionObserver","entries","inView","entry","thresholds","Array","createObserver","callbacks","isPlainChildren","props","InView","node","_unobserveCb","handleNode","undefined","handleChange","componentDidUpdate","prevProps","this","componentWillUnmount","observeNode","rootMargin","trackVisibility","delay","unobserve","render","as","tag","React","skip","initialInView","state","setState","setRef","result","displayName","Paragraph","_unsupportedIterableToArray","o","minLen","n","prototype","toString","slice","constructor","name","from","test","_arrayLikeToArray","len","arr2","_arrayWithHoles","isArray","_nonIterableRest","TypeError","animationControls","hasMounted","pendingAnimations","subscribers","Set","subscribe","visualElement","add","delete","definition","transitionOverride","animations_1","forEach","animateVisualElement","Promise","all","resolve","animation","set","invariant","setValues","stop","stopAnimation","mount","_a","apply","__spreadArray","__read","then","useConstant"],"mappings":"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","file":"static/js/14.d54e5915.chunk.js","sourcesContent":["import React from 'react'\nimport HeaderText from './../../components/DisplayText/Header'\nimport Paragraph from './../../components/DisplayText/Paragraph'\nimport { useInView } from 'react-intersection-observer'\nimport AnimateTransition from './../../components/Animations/AnimateTransition'\n\nconst Benefits = () => {\n    const collectionConfig = {\n        threshold: 1,\n        triggerOnce: true,\n    }\n\n    const [benefit1Ref, benefit1Inview] = useInView(collectionConfig)\n    const [benefit2Ref, benefit2Inview] = useInView(collectionConfig)\n    const [benefit3Ref, benefit3Inview] = useInView(collectionConfig)\n\n    return (\n        <div className=\"\">\n            <div>\n                <HeaderText\n                    base=\"4xl\"\n                    className=\"block text-primary mb-2 leading-tight tracking-widest mx-auto\"\n                >\n                    Benefits\n                </HeaderText>\n            </div>\n            <div className=\"\">\n                <div className=\"flex\">\n                    <div className=\"pr-1\" ref={benefit1Ref}>\n                        <HeaderText\n                            base=\"5xl\"\n                            md=\"4xl\"\n                            lg=\"5xl\"\n                            className=\"block text-info leading-tight tracking-widest mx-auto font-saira-condensed font-bold\"\n                        >\n                            1.\n                        </HeaderText>\n                    </div>\n                    <div className=\"flex-1 overflow-hidden  flex items-center\">\n                        <AnimateTransition\n                            visible={benefit1Inview}\n                            transitionFrom=\"left\"\n                        >\n                            <Paragraph className=\"text-blue-4  text-justify text-base md:text-lg lg:text-xl\">\n                                Access to Prime & Ambassador NFTs Marketplace.\n                            </Paragraph>\n                        </AnimateTransition>\n                    </div>\n                </div>\n                <div className=\"flex \">\n                    <div className=\"pr-1\" ref={benefit2Ref}>\n                        <HeaderText\n                            base=\"5xl\"\n                            md=\"4xl\"\n                            lg=\"5xl\"\n                            className=\"block text-info leading-tight tracking-widest mx-auto font-saira-condensed font-bold\"\n                        >\n                            2.\n                        </HeaderText>\n                    </div>\n                    <div className=\"flex-1 overflow-hidden flex items-center\">\n                        <AnimateTransition\n                            visible={benefit2Inview}\n                            transitionFrom=\"left\"\n                        >\n                            <Paragraph className=\"text-blue-4  text-justify  text-base md:text-lg lg:text-xl\">\n                                Unlock great discounts from our partner travel\n                                platform.\n                            </Paragraph>\n                        </AnimateTransition>\n                    </div>\n                </div>\n                <div className=\"flex\">\n                    <div className=\"pr-1\" ref={benefit3Ref}>\n                        <HeaderText\n                            base=\"5xl\"\n                            md=\"4xl\"\n                            lg=\"5xl\"\n                            className=\"block text-info leading-tight tracking-widest mx-auto font-saira-condensed font-bold\"\n                        >\n                            3.\n                        </HeaderText>\n                    </div>\n                    <div className=\"flex-1 overflow-hidden flex items-center\">\n                        <AnimateTransition\n                            visible={benefit3Inview}\n                            transitionFrom=\"left\"\n                        >\n                            <Paragraph className=\"text-blue-4  text-justify  text-base md:text-lg lg:text-xl\">\n                                OG members that mint 2 Nomadz will receive 1\n                                destination airdrop & Diamondhands will receive\n                                1 destination NFT airdrop.\n                            </Paragraph>\n                        </AnimateTransition>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Benefits\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","/* eslint-disable no-unused-vars */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { TextSizes } from './../../constants/textConstants'\nimport { returnTextSizeByScreenWidth } from './../../services/stylesServices'\n\nconst Header = ({ children, style, className, ...restProps }) => {\n    const { base, sm, md, lg, xl, xxl } = returnTextSizeByScreenWidth({\n        ...restProps,\n    })\n    return (\n        <div\n            className={`font-russo-one  ${className} ${base} ${sm} ${md} ${lg} ${xl}  ${xxl}`}\n            style={style}\n        >\n            {children}\n        </div>\n    )\n}\n\nHeader.propTypes = {\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node,\n    ]),\n    className: PropTypes.string,\n    base: PropTypes.oneOf(TextSizes),\n    sm: PropTypes.oneOf(TextSizes),\n    md: PropTypes.oneOf(TextSizes),\n    lg: PropTypes.oneOf(TextSizes),\n    xl: PropTypes.oneOf(TextSizes),\n    xxl: PropTypes.oneOf(TextSizes),\n}\n\nHeader.defaultProps = {\n    className: '',\n    base: '4xl',\n}\n\nexport default Header\n","export const returnTextSizeByScreenWidth = ({ base, sm, md, lg, xl, xxl }) => {\n    const _base = base ? `text-${base}` : ''\n    const _sm = sm ? `sm:text-${sm}` : ''\n    const _md = md ? `md:text-${md}` : ''\n    const _lg = lg ? `lg:text-${lg}` : ''\n    const _xl = xl ? `xl:text-${xl}` : ''\n    const _xxl = xxl ? `2xl:text-${xxl}` : ''\n\n    return { base: _base, sm: _sm, md: _md, lg: _lg, xl: _xl, xxl: _xxl }\n}\n\nconst temp = (values) => {\n    for (let index = 0; index < values.length; index++) {\n        if (values[index]) {\n            return values[index]\n        }\n    }\n}\n\nexport const returnValueByScreenWidth = (\n    screenSizeWidth,\n    { base, sm, md, lg, xl, xxl }\n) => {\n    if (screenSizeWidth >= 1536) {\n        return temp([xxl, xl, lg, md, sm, base])\n    } else if (screenSizeWidth >= 1280) {\n        return temp([xl, lg, md, sm, base])\n    } else if (screenSizeWidth >= 1024) {\n        return temp([lg, md, sm, base])\n    } else if (screenSizeWidth >= 768) {\n        return temp([md, sm, base])\n    } else if (screenSizeWidth >= 640) {\n        return temp([sm, base])\n    } else {\n        return base\n    }\n}\n","/* eslint-disable no-unused-vars */\nimport React, { useEffect } from 'react'\nimport { motion, useAnimation } from 'framer-motion'\nimport PropTypes from 'prop-types'\n\nconst transitionOptions = {\n    left: {\n        hidden: {\n            opacity: 0,\n            x: -200,\n        },\n        show: {\n            opacity: 1,\n            x: 0,\n        },\n    },\n    top: {\n        hidden: {\n            opacity: 0,\n            y: -200,\n        },\n        show: {\n            opacity: 1,\n            y: 0,\n        },\n    },\n    right: {\n        hidden: {\n            opacity: 0,\n            x: 200,\n        },\n        show: {\n            opacity: 1,\n            x: 0,\n        },\n    },\n    bottom: {\n        hidden: {\n            opacity: 0,\n            y: 200,\n        },\n        show: {\n            opacity: 1,\n            y: 0,\n        },\n    },\n    leftTop: {\n        hidden: {\n            opacity: 0,\n            x: -200,\n            y: -200,\n        },\n        show: {\n            opacity: 1,\n            x: 0,\n        },\n    },\n    rightTop: {\n        hidden: {\n            opacity: 0,\n            x: 200,\n            y: -200,\n        },\n        show: {\n            opacity: 1,\n            x: 0,\n        },\n    },\n    leftBottom: {\n        hidden: {\n            opacity: 0,\n            x: -200,\n            y: 200,\n        },\n        show: {\n            opacity: 1,\n            x: 0,\n        },\n    },\n    rightBottom: {\n        hidden: {\n            opacity: 0,\n            x: 200,\n            y: 200,\n        },\n        show: {\n            opacity: 1,\n            x: 0,\n        },\n    },\n}\n\nconst defaultTransitionConfig = {\n    type: 'spring',\n}\n\nconst AnimateTransition = ({\n    visible,\n    transitionFrom = 'left',\n    children,\n    className,\n    duration = 0.85,\n    transitionConfig = defaultTransitionConfig,\n}) => {\n    const controls = useAnimation()\n\n    useEffect(() => {\n        if (visible) controls.start('show')\n        else controls.start('hidden')\n    }, [controls, visible])\n\n    return (\n        <motion.div\n            className={className}\n            initial=\"hidden\"\n            variants={transitionOptions[transitionFrom]}\n            animate={controls}\n            transition={{ duration, ...transitionConfig }}\n        >\n            {children}\n        </motion.div>\n    )\n}\nAnimateTransition.defaultProps = {}\n\nAnimateTransition.propTypes = {\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node,\n    ]),\n}\n\nexport default AnimateTransition\n","import { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  static displayName = 'InView';\n  static defaultProps = {\n    threshold: 0,\n    triggerOnce: false,\n    initialInView: false,\n  };\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      tag,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || tag || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport { InViewHookResponse, IntersectionOptions } from './index';\nimport { useEffect } from 'react';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const unobserve = React.useRef<Function>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n  });\n  const setRef = React.useCallback(\n    (node) => {\n      if (unobserve.current !== undefined) {\n        unobserve.current();\n        unobserve.current = undefined;\n      }\n\n      // Skip creating the observer\n      if (skip) return;\n\n      if (node) {\n        unobserve.current = observe(\n          node,\n          (inView, entry) => {\n            setState({ inView, entry });\n\n            if (entry.isIntersecting && triggerOnce && unobserve.current) {\n              // If it should only trigger once, unobserve the element after it's inView\n              unobserve.current();\n              unobserve.current = undefined;\n            }\n          },\n          {\n            root,\n            rootMargin,\n            threshold,\n            // @ts-ignore\n            trackVisibility,\n            // @ts-ignore\n            delay,\n          },\n          fallbackInView,\n        );\n      }\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  /* eslint-disable-next-line */\n  useEffect(() => {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n      });\n    }\n  });\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n","/* eslint-disable no-unused-vars */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { TextSizes } from './../../constants/textConstants'\nimport { returnTextSizeByScreenWidth } from './../../services/stylesServices'\n\nconst Paragraph = ({ children, className, ...restProps }) => {\n    const { base, sm, md, lg, xl, xxl } = returnTextSizeByScreenWidth({\n        ...restProps,\n    })\n\n    return (\n        <p className={`${className} ${base} ${sm} ${md} ${lg} ${xl} ${xxl}`}>\n            {children}\n        </p>\n    )\n}\n\nParagraph.defaultProps = {\n    className: 'text-blue-4',\n    // base: 'xl',\n}\n\nParagraph.propTypes = {\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node,\n    ]),\n    className: PropTypes.string,\n    base: PropTypes.oneOf(TextSizes),\n    sm: PropTypes.oneOf(TextSizes),\n    md: PropTypes.oneOf(TextSizes),\n    lg: PropTypes.oneOf(TextSizes),\n    xl: PropTypes.oneOf(TextSizes),\n    xxl: PropTypes.oneOf(TextSizes),\n}\n\nexport default Paragraph\n","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { __spreadArray, __read } from 'tslib';\nimport { invariant } from 'hey-listen';\nimport { stopAnimation, animateVisualElement } from '../render/utils/animation.js';\nimport { setValues } from '../render/utils/setters.js';\n\n/**\n * @public\n */\nfunction animationControls() {\n    /**\n     * Track whether the host component has mounted.\n     */\n    var hasMounted = false;\n    /**\n     * Pending animations that are started before a component is mounted.\n     * TODO: Remove this as animations should only run in effects\n     */\n    var pendingAnimations = [];\n    /**\n     * A collection of linked component animation controls.\n     */\n    var subscribers = new Set();\n    var controls = {\n        subscribe: function (visualElement) {\n            subscribers.add(visualElement);\n            return function () { return void subscribers.delete(visualElement); };\n        },\n        start: function (definition, transitionOverride) {\n            /**\n             * TODO: We only perform this hasMounted check because in Framer we used to\n             * encourage the ability to start an animation within the render phase. This\n             * isn't behaviour concurrent-safe so when we make Framer concurrent-safe\n             * we can ditch this.\n             */\n            if (hasMounted) {\n                var animations_1 = [];\n                subscribers.forEach(function (visualElement) {\n                    animations_1.push(animateVisualElement(visualElement, definition, {\n                        transitionOverride: transitionOverride,\n                    }));\n                });\n                return Promise.all(animations_1);\n            }\n            else {\n                return new Promise(function (resolve) {\n                    pendingAnimations.push({\n                        animation: [definition, transitionOverride],\n                        resolve: resolve,\n                    });\n                });\n            }\n        },\n        set: function (definition) {\n            invariant(hasMounted, \"controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            return subscribers.forEach(function (visualElement) {\n                setValues(visualElement, definition);\n            });\n        },\n        stop: function () {\n            subscribers.forEach(function (visualElement) {\n                stopAnimation(visualElement);\n            });\n        },\n        mount: function () {\n            hasMounted = true;\n            pendingAnimations.forEach(function (_a) {\n                var animation = _a.animation, resolve = _a.resolve;\n                controls.start.apply(controls, __spreadArray([], __read(animation))).then(resolve);\n            });\n            return function () {\n                hasMounted = false;\n                controls.stop();\n            };\n        },\n    };\n    return controls;\n}\n\nexport { animationControls };\n","import { animationControls } from './animation-controls.js';\nimport { useEffect } from 'react';\nimport { useConstant } from '../utils/use-constant.js';\n\n/**\n * Creates `AnimationControls`, which can be used to manually start, stop\n * and sequence animations on one or more components.\n *\n * The returned `AnimationControls` should be passed to the `animate` property\n * of the components you want to animate.\n *\n * These components can then be animated with the `start` method.\n *\n * @library\n *\n * ```jsx\n * import * as React from 'react'\n * import { Frame, useAnimation } from 'framer'\n *\n * export function MyComponent(props) {\n *    const controls = useAnimation()\n *\n *    controls.start({\n *        x: 100,\n *        transition: { duration: 0.5 },\n *    })\n *\n *    return <Frame animate={controls} />\n * }\n * ```\n *\n * @motion\n *\n * ```jsx\n * import * as React from 'react'\n * import { motion, useAnimation } from 'framer-motion'\n *\n * export function MyComponent(props) {\n *    const controls = useAnimation()\n *\n *    controls.start({\n *        x: 100,\n *        transition: { duration: 0.5 },\n *    })\n *\n *    return <motion.div animate={controls} />\n * }\n * ```\n *\n * @returns Animation controller with `start` and `stop` methods\n *\n * @public\n */\nfunction useAnimation() {\n    var controls = useConstant(animationControls);\n    useEffect(controls.mount, []);\n    return controls;\n}\n\nexport { useAnimation };\n"],"sourceRoot":""}