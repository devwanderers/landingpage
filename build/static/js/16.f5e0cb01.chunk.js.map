{"version":3,"sources":["../node_modules/framer-motion/dist/es/animation/animation-controls.js","../node_modules/framer-motion/dist/es/animation/use-animation.js","../node_modules/framer-motion/dist/es/utils/transform.js","../node_modules/framer-motion/dist/es/value/use-combine-values.js","../node_modules/framer-motion/dist/es/value/use-motion-value.js","../node_modules/framer-motion/dist/es/value/use-on-change.js","../node_modules/framer-motion/dist/es/value/use-transform.js","../node_modules/framer-motion/dist/es/value/scroll/utils.js","../node_modules/framer-motion/dist/es/value/scroll/use-viewport-scroll.js","../../src/observe.ts","../../src/InView.tsx","../../src/useInView.tsx"],"names":["animationControls","hasMounted","pendingAnimations","subscribers","Set","controls","subscribe","visualElement","add","delete","start","definition","transitionOverride","animations_1","forEach","push","animateVisualElement","Promise","all","resolve","animation","set","invariant","setValues","stop","stopAnimation","mount","_a","apply","__spreadArray","__read","then","useAnimation","useConstant","useEffect","getMixer","v","mix","isCustomValueType","undefined","useCombineMotionValues","values","combineValues","value","initial","motionValue","useContext","MotionConfigContext","isStatic","setLatest_1","useState","onChange","useMotionValue","updateValue","handler","subscriptions","map","unsubscribe","useMultiOnChange","sync","update","useTransform","input","inputRangeOrTransformer","outputRange","options","transformer","args","_i","arguments","length","useImmediate","Array","isArray","argOffset","inputValue","inputRange","interpolator","interpolate","__assign","mixer","transform","useListTransform","latest","numValues","i","get","setProgress","offset","maxOffset","viewportScrollValues","getViewportScrollOffsets","xOffset","window","pageXOffset","yOffset","pageYOffset","xMaxOffset","document","body","clientWidth","innerWidth","yMaxOffset","clientHeight","innerHeight","hasListeners","addEventListeners","updateScrollValues","getOffsets","scrollX","scrollY","scrollXProgress","scrollYProgress","createScrollUpdater","addDomEvent","passive","useViewportScroll","useIsomorphicLayoutEffect","observerMap","RootIds","rootId","unsupportedValue","optionsToId","Object","key","root","observe","element","callback","fallbackInView","bounds","isIntersecting","target","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","id","instance","elements","observer","IntersectionObserver","entries","inView","entry","thresholds","createObserver","callbacks","isPlainChildren","props","InView","node","_unobserveCb","handleNode","handleChange","componentDidUpdate","prevProps","this","componentWillUnmount","observeNode","threshold","rootMargin","trackVisibility","delay","unobserve","render","children","ref","as","tag","React","useInView","triggerOnce","skip","initialInView","state","setState","setRef","result","displayName","defaultProps"],"mappings":"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","file":"static/js/16.f5e0cb01.chunk.js","sourcesContent":["import { __spreadArray, __read } from 'tslib';\nimport { invariant } from 'hey-listen';\nimport { stopAnimation, animateVisualElement } from '../render/utils/animation.js';\nimport { setValues } from '../render/utils/setters.js';\n\n/**\n * @public\n */\nfunction animationControls() {\n    /**\n     * Track whether the host component has mounted.\n     */\n    var hasMounted = false;\n    /**\n     * Pending animations that are started before a component is mounted.\n     * TODO: Remove this as animations should only run in effects\n     */\n    var pendingAnimations = [];\n    /**\n     * A collection of linked component animation controls.\n     */\n    var subscribers = new Set();\n    var controls = {\n        subscribe: function (visualElement) {\n            subscribers.add(visualElement);\n            return function () { return void subscribers.delete(visualElement); };\n        },\n        start: function (definition, transitionOverride) {\n            /**\n             * TODO: We only perform this hasMounted check because in Framer we used to\n             * encourage the ability to start an animation within the render phase. This\n             * isn't behaviour concurrent-safe so when we make Framer concurrent-safe\n             * we can ditch this.\n             */\n            if (hasMounted) {\n                var animations_1 = [];\n                subscribers.forEach(function (visualElement) {\n                    animations_1.push(animateVisualElement(visualElement, definition, {\n                        transitionOverride: transitionOverride,\n                    }));\n                });\n                return Promise.all(animations_1);\n            }\n            else {\n                return new Promise(function (resolve) {\n                    pendingAnimations.push({\n                        animation: [definition, transitionOverride],\n                        resolve: resolve,\n                    });\n                });\n            }\n        },\n        set: function (definition) {\n            invariant(hasMounted, \"controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            return subscribers.forEach(function (visualElement) {\n                setValues(visualElement, definition);\n            });\n        },\n        stop: function () {\n            subscribers.forEach(function (visualElement) {\n                stopAnimation(visualElement);\n            });\n        },\n        mount: function () {\n            hasMounted = true;\n            pendingAnimations.forEach(function (_a) {\n                var animation = _a.animation, resolve = _a.resolve;\n                controls.start.apply(controls, __spreadArray([], __read(animation))).then(resolve);\n            });\n            return function () {\n                hasMounted = false;\n                controls.stop();\n            };\n        },\n    };\n    return controls;\n}\n\nexport { animationControls };\n","import { animationControls } from './animation-controls.js';\nimport { useEffect } from 'react';\nimport { useConstant } from '../utils/use-constant.js';\n\n/**\n * Creates `AnimationControls`, which can be used to manually start, stop\n * and sequence animations on one or more components.\n *\n * The returned `AnimationControls` should be passed to the `animate` property\n * of the components you want to animate.\n *\n * These components can then be animated with the `start` method.\n *\n * @library\n *\n * ```jsx\n * import * as React from 'react'\n * import { Frame, useAnimation } from 'framer'\n *\n * export function MyComponent(props) {\n *    const controls = useAnimation()\n *\n *    controls.start({\n *        x: 100,\n *        transition: { duration: 0.5 },\n *    })\n *\n *    return <Frame animate={controls} />\n * }\n * ```\n *\n * @motion\n *\n * ```jsx\n * import * as React from 'react'\n * import { motion, useAnimation } from 'framer-motion'\n *\n * export function MyComponent(props) {\n *    const controls = useAnimation()\n *\n *    controls.start({\n *        x: 100,\n *        transition: { duration: 0.5 },\n *    })\n *\n *    return <motion.div animate={controls} />\n * }\n * ```\n *\n * @returns Animation controller with `start` and `stop` methods\n *\n * @public\n */\nfunction useAnimation() {\n    var controls = useConstant(animationControls);\n    useEffect(controls.mount, []);\n    return controls;\n}\n\nexport { useAnimation };\n","import { __assign } from 'tslib';\nimport { interpolate } from 'popmotion';\n\nvar isCustomValueType = function (v) {\n    return typeof v === \"object\" && v.mix;\n};\nvar getMixer = function (v) { return (isCustomValueType(v) ? v.mix : undefined); };\nfunction transform() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var useImmediate = !Array.isArray(args[0]);\n    var argOffset = useImmediate ? 0 : -1;\n    var inputValue = args[0 + argOffset];\n    var inputRange = args[1 + argOffset];\n    var outputRange = args[2 + argOffset];\n    var options = args[3 + argOffset];\n    var interpolator = interpolate(inputRange, outputRange, __assign({ mixer: getMixer(outputRange[0]) }, options));\n    return useImmediate ? interpolator(inputValue) : interpolator;\n}\n\nexport { transform };\n","import { useMotionValue } from './use-motion-value.js';\nimport { useMultiOnChange } from './use-on-change.js';\nimport sync from 'framesync';\n\nfunction useCombineMotionValues(values, combineValues) {\n    /**\n     * Initialise the returned motion value. This remains the same between renders.\n     */\n    var value = useMotionValue(combineValues());\n    /**\n     * Create a function that will update the template motion value with the latest values.\n     * This is pre-bound so whenever a motion value updates it can schedule its\n     * execution in Framesync. If it's already been scheduled it won't be fired twice\n     * in a single frame.\n     */\n    var updateValue = function () { return value.set(combineValues()); };\n    /**\n     * Synchronously update the motion value with the latest values during the render.\n     * This ensures that within a React render, the styles applied to the DOM are up-to-date.\n     */\n    updateValue();\n    /**\n     * Subscribe to all motion values found within the template. Whenever any of them change,\n     * schedule an update.\n     */\n    useMultiOnChange(values, function () { return sync.update(updateValue, false, true); });\n    return value;\n}\n\nexport { useCombineMotionValues };\n","import { __read } from 'tslib';\nimport { useContext, useState, useEffect } from 'react';\nimport { motionValue } from './index.js';\nimport { MotionConfigContext } from '../context/MotionConfigContext.js';\nimport { useConstant } from '../utils/use-constant.js';\n\n/**\n * Creates a `MotionValue` to track the state and velocity of a value.\n *\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\n *\n * @library\n *\n * ```jsx\n * export function MyComponent() {\n *   const scale = useMotionValue(1)\n *\n *   return <Frame scale={scale} />\n * }\n * ```\n *\n * @motion\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const scale = useMotionValue(1)\n *\n *   return <motion.div style={{ scale }} />\n * }\n * ```\n *\n * @param initial - The initial state.\n *\n * @public\n */\nfunction useMotionValue(initial) {\n    var value = useConstant(function () { return motionValue(initial); });\n    /**\n     * If this motion value is being used in static mode, like on\n     * the Framer canvas, force components to rerender when the motion\n     * value is updated.\n     */\n    var isStatic = useContext(MotionConfigContext).isStatic;\n    if (isStatic) {\n        var _a = __read(useState(initial), 2), setLatest_1 = _a[1];\n        useEffect(function () { return value.onChange(setLatest_1); }, []);\n    }\n    return value;\n}\n\nexport { useMotionValue };\n","import { useEffect } from 'react';\nimport { isMotionValue } from './utils/is-motion-value.js';\n\nfunction useOnChange(value, callback) {\n    useEffect(function () {\n        if (isMotionValue(value))\n            return value.onChange(callback);\n    }, [callback]);\n}\nfunction useMultiOnChange(values, handler) {\n    useEffect(function () {\n        var subscriptions = values.map(function (value) { return value.onChange(handler); });\n        return function () { return subscriptions.forEach(function (unsubscribe) { return unsubscribe(); }); };\n    });\n}\n\nexport { useMultiOnChange, useOnChange };\n","import { __read } from 'tslib';\nimport { transform } from '../utils/transform.js';\nimport { useCombineMotionValues } from './use-combine-values.js';\nimport { useConstant } from '../utils/use-constant.js';\n\nfunction useTransform(input, inputRangeOrTransformer, outputRange, options) {\n    var transformer = typeof inputRangeOrTransformer === \"function\"\n        ? inputRangeOrTransformer\n        : transform(inputRangeOrTransformer, outputRange, options);\n    return Array.isArray(input)\n        ? useListTransform(input, transformer)\n        : useListTransform([input], function (_a) {\n            var _b = __read(_a, 1), latest = _b[0];\n            return transformer(latest);\n        });\n}\nfunction useListTransform(values, transformer) {\n    var latest = useConstant(function () { return []; });\n    return useCombineMotionValues(values, function () {\n        latest.length = 0;\n        var numValues = values.length;\n        for (var i = 0; i < numValues; i++) {\n            latest[i] = values[i].get();\n        }\n        return transformer(latest);\n    });\n}\n\nexport { useTransform };\n","import { motionValue } from '../index.js';\n\nfunction createScrollMotionValues() {\n    return {\n        scrollX: motionValue(0),\n        scrollY: motionValue(0),\n        scrollXProgress: motionValue(0),\n        scrollYProgress: motionValue(0),\n    };\n}\nfunction setProgress(offset, maxOffset, value) {\n    value.set(!offset || !maxOffset ? 0 : offset / maxOffset);\n}\nfunction createScrollUpdater(values, getOffsets) {\n    var update = function () {\n        var _a = getOffsets(), xOffset = _a.xOffset, yOffset = _a.yOffset, xMaxOffset = _a.xMaxOffset, yMaxOffset = _a.yMaxOffset;\n        // Set absolute positions\n        values.scrollX.set(xOffset);\n        values.scrollY.set(yOffset);\n        // Set 0-1 progress\n        setProgress(xOffset, xMaxOffset, values.scrollXProgress);\n        setProgress(yOffset, yMaxOffset, values.scrollYProgress);\n    };\n    update();\n    return update;\n}\n\nexport { createScrollMotionValues, createScrollUpdater };\n","import { createScrollUpdater, createScrollMotionValues } from './utils.js';\nimport { addDomEvent } from '../../events/use-dom-event.js';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.js';\n\nvar viewportScrollValues;\nfunction getViewportScrollOffsets() {\n    return {\n        xOffset: window.pageXOffset,\n        yOffset: window.pageYOffset,\n        xMaxOffset: document.body.clientWidth - window.innerWidth,\n        yMaxOffset: document.body.clientHeight - window.innerHeight,\n    };\n}\nvar hasListeners = false;\nfunction addEventListeners() {\n    hasListeners = true;\n    if (typeof window === \"undefined\")\n        return;\n    var updateScrollValues = createScrollUpdater(viewportScrollValues, getViewportScrollOffsets);\n    addDomEvent(window, \"scroll\", updateScrollValues, { passive: true });\n    addDomEvent(window, \"resize\", updateScrollValues);\n}\n/**\n * Returns MotionValues that update when the viewport scrolls:\n *\n * - `scrollX` — Horizontal scroll distance in pixels.\n * - `scrollY` — Vertical scroll distance in pixels.\n * - `scrollXProgress` — Horizontal scroll progress between `0` and `1`.\n * - `scrollYProgress` — Vertical scroll progress between `0` and `1`.\n *\n * **Warning:** Setting `body` or `html` to `height: 100%` or similar will break the `Progress`\n * values as this breaks the browser's capability to accurately measure the page length.\n *\n * @library\n *\n * ```jsx\n * import * as React from \"react\"\n * import {\n *   Frame,\n *   useViewportScroll,\n *   useTransform\n * } from \"framer\"\n *\n * export function MyComponent() {\n *   const { scrollYProgress } = useViewportScroll()\n *   return <Frame scaleX={scrollYProgress} />\n * }\n * ```\n *\n * @motion\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const { scrollYProgress } = useViewportScroll()\n *   return <motion.div style={{ scaleX: scrollYProgress }} />\n * }\n * ```\n *\n * @public\n */\nfunction useViewportScroll() {\n    /**\n     * Lazy-initialise the viewport scroll values\n     */\n    if (!viewportScrollValues) {\n        viewportScrollValues = createScrollMotionValues();\n    }\n    useIsomorphicLayoutEffect(function () {\n        !hasListeners && addEventListeners();\n    }, []);\n    return viewportScrollValues;\n}\n\nexport { useViewportScroll };\n","import { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  static displayName = 'InView';\n  static defaultProps = {\n    threshold: 0,\n    triggerOnce: false,\n    initialInView: false,\n  };\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      tag,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || tag || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport { InViewHookResponse, IntersectionOptions } from './index';\nimport { useEffect } from 'react';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const unobserve = React.useRef<Function>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n  });\n  const setRef = React.useCallback(\n    (node) => {\n      if (unobserve.current !== undefined) {\n        unobserve.current();\n        unobserve.current = undefined;\n      }\n\n      // Skip creating the observer\n      if (skip) return;\n\n      if (node) {\n        unobserve.current = observe(\n          node,\n          (inView, entry) => {\n            setState({ inView, entry });\n\n            if (entry.isIntersecting && triggerOnce && unobserve.current) {\n              // If it should only trigger once, unobserve the element after it's inView\n              unobserve.current();\n              unobserve.current = undefined;\n            }\n          },\n          {\n            root,\n            rootMargin,\n            threshold,\n            // @ts-ignore\n            trackVisibility,\n            // @ts-ignore\n            delay,\n          },\n          fallbackInView,\n        );\n      }\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  /* eslint-disable-next-line */\n  useEffect(() => {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n      });\n    }\n  });\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"sourceRoot":""}